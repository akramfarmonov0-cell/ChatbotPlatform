🔧 AI AGENT 3 GA BERILADIGAN TO‘LIQ PROMPT:
Siz AI chatbot platformasi yaratish uchun yordamchi AI sifatida ishlaysiz. Men sizga Replitda ishlaydigan, butunlay funksional, ko‘p tilli, AI-integratsiyalangan, mobil optimallashtirilgan Flask loyihasini tuzishni buyuraman. Loyiha quyidagi talablarga to‘g‘ri kelishi kerak: 

✅ LOYIHA TALABLARI (HECH QANDAY QO‘SHIMCHA SO‘ROV KERAK EMAS):
Asosiy texnologiyalar:
Backend: Flask (3.0.3)
Database: SQLite (SQLAlchemy)
AI: Google Gemini API (gemini-pro)
Frontend: Bootstrap 5 + Font Awesome + Chart.js (CDN)
Tillar: Uzbek, Russian, English (Flask-Babel)
Authentication: Flask-Login
Hosting: Replitga moslashgan (port 5000)
Fayl tuzilishi (to‘g‘ri papkalar va fayllar):


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
main.py
requirements.txt
.env
config.py
models/user.py
routes/main_routes.py
routes/admin_routes.py
utils/ai_handler.py
templates/
  ├── base.html
  ├── index.html
  ├── login.html
  ├── register.html
  ├── chat.html
  ├── knowledge.html
  ├── pending.html
  └── admin/dashboard.html
static/
  ├── css/
  │   └── style.css
  ├── js/
  │   └── main.js
  └── uploads/
      └── knowledge/  ← fayllar saqlanadigan papka
Barcha fayllar quyidagicha bo‘lsin (hech qanday o‘zgartirishsiz):
🔹 requirements.txt: 
txt


1
2
3
4
5
6
7
8
9
10
11
Flask==3.0.3
Flask-SQLAlchemy==3.0.5
Flask-Login==0.6.3
Flask-Babel==3.1.0
google-generativeai==0.5.0
python-dotenv==1.0.0
requests==2.31.0
psycopg2-binary==2.9.9
gunicorn==21.2.0
APScheduler==3.10.4
Werkzeug==3.0.1
🔹 .env: 
env


1
2
3
SECRET_KEY=your_super_secret_key_1234567890!
GEMINI_API_KEY=your_gemini_api_key_here
DATABASE_URL=sqlite:///app.db
🔹 config.py: 
python


1
2
3
4
5
6
7
8
9
10
11
12
⌄
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    UPLOAD_FOLDER = 'uploads/knowledge/'
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024
    LANGUAGES = ['uz', 'ru', 'en']
🔹 models/user.py: 
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
⌄
⌄
⌄
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash

db = SQLAlchemy()

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_approved = db.Column(db.Boolean, default=False)
    trial_ends_at = db.Column(db.DateTime, default=lambda: datetime.utcnow() + timedelta(days=3))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
🔹 utils/ai_handler.py: 
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
⌄
⌄
⌄
import os
from google.generativeai import configure, GenerativeModel
from config import Config

configure(api_key=os.getenv("GEMINI_API_KEY"))
model = GenerativeModel('gemini-pro')

def get_ai_response(prompt, context=""):
    try:
        full_prompt = f"{context}\n\nFoydalanuvchi: {prompt}"
        response = model.generate_content(full_prompt)
        return response.text.strip()
    except Exception as e:
        return _("Kechirasiz, AI hozir ishlamayapti. Keyinroq qaytadan urinib ko'ring.")
🔹 routes/main_routes.py: 
python


47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, session
@login_required
def chat():
    return render_template('chat.html')

@main_bp.route('/chat/send', methods=['POST'])
@login_required
def send_message():
    user_input = request.json.get('message', '').strip()
    if not user_input:
        return jsonify({'reply': _("Xabar bo'sh bo'lmasligi kerak.")})

    history = session.get('chat_history', [])
    context = "\n".join([f"Foydalanuvchi: {h['msg']}" for h in history[-3:]]) if history else ""

    reply = get_ai_response(user_input, context)
    
    history.append({"user": user_input, "bot": reply})
    session['chat_history'] = history[-10:]

    return jsonify({'reply': reply})

@main_bp.route('/chat/history')
@login_required
def get_chat_history():
    history = session.get('chat_history', [])
    return jsonify(history)

@main_bp.route('/knowledge', methods=['GET', 'POST'])
@login_required
def knowledge():
    if request.method == 'POST':
        text = request.form.get('text', '').strip()
        file = request.files.get('file')
        
        if text:
            filename = f"text_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(text)
            flash(_("Matn muvaffaqiyatli saqlandi."))

        elif file and file.filename:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            flash(_("Fayl muvaffaqiyatli yuklandi."))

        return redirect(url_for('main.knowledge'))

    files = []
    for f in os.listdir(app.config['UPLOAD_FOLDER']):
        if f.endswith(('.txt', '.pdf')):
            files.append(f)
    return render_template('knowledge.html', files=files)

@main_bp.route('/pending')
@login_required
def pending():
    if current_user.is_approved:
        return redirect(url_for('main.chat'))
    return render_template('pending.html')
🔹 routes/admin_routes.py: 
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
⌄
⌄
⌄
⌄
⌄
from flask import Blueprint, render_template, redirect, url_for, flash, jsonify, request
from flask_login import login_required
from models.user import db, User

admin_bp = Blueprint('admin', __name__)

@admin_bp.route('/')
@login_required
def dashboard():
    users = User.query.all()
    return render_template('admin/dashboard.html', users=users)

@admin_bp.route('/approve/<int:user_id>')
@login_required
def approve_user(user_id):
    user = User.query.get_or_404(user_id)
    user.is_approved = True
    db.session.commit()
    flash(f"{user.username} tasdiqlandi!")
    return redirect(url_for('admin.dashboard'))

@admin_bp.route('/delete/<int:user_id>')
@login_required
def delete_user(user_id):
    user = User.query.get_or_404(user_id)
    if user.is_admin:
        flash("Adminni o'chirib bo'lmaydi!")
    else:
        db.session.delete(user)
        db.session.commit()
        flash(f"{user.username} o'chirildi.")
    return redirect(url_for('admin.dashboard'))
🔹 main.py: 
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
import os
from flask import Flask, session, redirect, url_for, request, flash, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_babel import Babel, _, lazy_gettext as _l
from datetime import datetime, timedelta
from google.generativeai import configure, GenerativeModel
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from config import Config
from models.user import db, User
from routes.main_routes import main_bp
from routes.admin_routes import admin_bp
import logging

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
app.config.from_object(Config)

os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

db.init_app(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'main.login'

babel = Babel(app)

@babel.localeselector
def get_locale():
    if 'locale' in session:
        return session['locale']
    return request.accept_languages.best_match(app.config['LANGUAGES'])

@app.route('/set-locale/<locale>')
def set_locale(locale):
    if locale in app.config['LANGUAGES']:
        session['locale'] = locale
    return redirect(request.referrer or '/')

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

configure(api_key=os.getenv("GEMINI_API_KEY"))

def admin_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin:
            flash(_("Sizda bu sahifaga kirish huquqi yo'q."))
            return redirect(url_for('main.index'))
        return f(*args, **kwargs)
    return decorated_function

def trial_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if current_user.is_authenticated:
            if current_user.trial_ends_at < datetime.utcnow() and not current_user.is_approved:
                flash(_("Sizning sinov muddatingiz tugagan. Admin tomonidan tasdiqlash kerak."))
                return redirect(url_for('main.pending'))
        return f(*args, **kwargs)
    return decorated_function

app.register_blueprint(main_bp)
app.register_blueprint(admin_bp, url_prefix='/admin')

@app.route('/')
def index():
    return render_template('index.html')

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        if not User.query.filter_by(username='admin').first():
            admin = User(
                username='admin',
                email='admin@example.com',
                password_hash=generate_password_hash('admin123'),
                is_admin=True,
                is_approved=True
            )
            db.session.add(admin)
            db.session.commit()
            print("✅ Admin foydalanuvchi yaratildi: admin / admin123")
    app.run(host='0.0.0.0', port=5000, debug=True)
🔹 templates/base.html:
[Yuqoridagi base.html kontentini to‘liq nusxalang] 
🔹 templates/index.html, login.html, register.html, chat.html, knowledge.html, pending.html, admin/dashboard.html:
[Yuqoridagi barcha template fayllarini to‘liq nusxalang] 
🔹 static/css/style.css: 
css


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
⌄
⌄
⌄
⌄
⌄
⌄
⌄
body {
    font-size: 16px;
}
.btn {
    min-height: 44px;
    font-size: 1rem;
}
.input-group > input {
    font-size: 16px;
}
#chat-box {
    font-size: 15px;
}
@media (max-width: 768px) {
    .navbar-brand {
        font-size: 1.2rem;
    }
    .container {
        padding-left: 10px;
        padding-right: 10px;
    }
}
🔹 static/js/main.js: (bo‘sh fayl) 
✅ YANA QO‘SHIMCHA TALABLAR:
Papkalarni (templates/, static/, uploads/knowledge/, models/, routes/, utils/) Replitda to‘g‘ri tuzing.
.env faylini Replitda “Secrets” dagi kalitlar bilan bog‘langan holda ishlatish uchun qo‘llanma berilmaydi — AI Agent 3 faqat faylni tuzadi, men “Secrets” ni manuall qo‘shaman.
Dastur boshlanganda avtomatik ravishda admin foydalanuvchisi yaratilsin:
👉 username: admin, password: admin123
Barcha matnlarni _(...) bilan belgilang — Flask-Babel bilan ishlasin.
Replitda “Run” tugmasi bosilganda dastur 5000-portda ishlasin.
Hech qanday xato, hech qanday import error, hech qanday “undefined variable” bo‘lmasin.
Foydalanuvchi registratsiya qilganda, unga 3 kunlik sinov muddati berilsin.
Admin panelda “Tasdiqlash” va “O‘chirish” tugmalar bo‘lsin.
Chatda suhbat tarixi saqlansin (session orqali).
Fayl yuklash (matn/fayl) ishlasin.
Mobile-first dizayn bo‘lsin — iOS zoom qilmasin.
✅ YAKUNIY SHART:
AI Agent 3 — ushbu barcha fayllarni Replitda to‘g‘ri tuzib, fayllarning nomi, ichki mazmuni, papkalar tuzilishi hammasi aniq va to‘g‘ri bo‘lganda, loyihani ishga tushirish uchun “Run” tugmasini bosishga tayyor bo‘lishi kerak. Agar bitta fayl noto‘g‘ri yozilgan bo‘lsa — loyihani ishga tushirmasdan oldin qayta tuzing. 

Sizga qo‘shimcha savollar berilmaydi. Siz faqat shu talablarga to‘liq javob berishingiz kerak — va loyihaning barcha fayllari to‘g‘ri tuzilgan bo‘lishi kerak. 

✅ Natija: AI Agent 3 ushbu promtni o‘qib, 100% ishlaydigan loyihani tuzadi.
Siz Replitga kirib, “Run” tugmasini bosasiz — dastur ishlaydi.
Admin hisobi: admin / admin123
Boshqa foydalanuvchilar ro‘yxatdan o‘tsa, 3 kun sinov — keyin admin tasdiqlashi kerak.
Chat, fayl yuklash, tillar — hammasi ishlaydi.